/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LoadingImport } from './routes/loading'
import { Route as PrivateImport } from './routes/_private'
import { Route as PrivateIndexImport } from './routes/_private/index'
import { Route as PrivateTasksImport } from './routes/_private/tasks'
import { Route as PrivateQuickImport } from './routes/_private/quick'
import { Route as PrivateItemsImport } from './routes/_private/items'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LoadingRoute = LoadingImport.update({
  path: '/loading',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const PrivateIndexRoute = PrivateIndexImport.update({
  path: '/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateTasksRoute = PrivateTasksImport.update({
  path: '/tasks',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateQuickRoute = PrivateQuickImport.update({
  path: '/quick',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateItemsRoute = PrivateItemsImport.update({
  path: '/items',
  getParentRoute: () => PrivateRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/loading': {
      id: '/loading'
      path: '/loading'
      fullPath: '/loading'
      preLoaderRoute: typeof LoadingImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_private/items': {
      id: '/_private/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof PrivateItemsImport
      parentRoute: typeof PrivateImport
    }
    '/_private/quick': {
      id: '/_private/quick'
      path: '/quick'
      fullPath: '/quick'
      preLoaderRoute: typeof PrivateQuickImport
      parentRoute: typeof PrivateImport
    }
    '/_private/tasks': {
      id: '/_private/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof PrivateTasksImport
      parentRoute: typeof PrivateImport
    }
    '/_private/': {
      id: '/_private/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateIndexImport
      parentRoute: typeof PrivateImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteChildren {
  PrivateItemsRoute: typeof PrivateItemsRoute
  PrivateQuickRoute: typeof PrivateQuickRoute
  PrivateTasksRoute: typeof PrivateTasksRoute
  PrivateIndexRoute: typeof PrivateIndexRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateItemsRoute: PrivateItemsRoute,
  PrivateQuickRoute: PrivateQuickRoute,
  PrivateTasksRoute: PrivateTasksRoute,
  PrivateIndexRoute: PrivateIndexRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PrivateRouteWithChildren
  '/loading': typeof LoadingRoute
  '/login': typeof LoginRoute
  '/items': typeof PrivateItemsRoute
  '/quick': typeof PrivateQuickRoute
  '/tasks': typeof PrivateTasksRoute
  '/': typeof PrivateIndexRoute
}

export interface FileRoutesByTo {
  '/loading': typeof LoadingRoute
  '/login': typeof LoginRoute
  '/items': typeof PrivateItemsRoute
  '/quick': typeof PrivateQuickRoute
  '/tasks': typeof PrivateTasksRoute
  '/': typeof PrivateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_private': typeof PrivateRouteWithChildren
  '/loading': typeof LoadingRoute
  '/login': typeof LoginRoute
  '/_private/items': typeof PrivateItemsRoute
  '/_private/quick': typeof PrivateQuickRoute
  '/_private/tasks': typeof PrivateTasksRoute
  '/_private/': typeof PrivateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/loading' | '/login' | '/items' | '/quick' | '/tasks' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/loading' | '/login' | '/items' | '/quick' | '/tasks' | '/'
  id:
    | '__root__'
    | '/_private'
    | '/loading'
    | '/login'
    | '/_private/items'
    | '/_private/quick'
    | '/_private/tasks'
    | '/_private/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  LoadingRoute: typeof LoadingRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  LoadingRoute: LoadingRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_private",
        "/loading",
        "/login"
      ]
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/items",
        "/_private/quick",
        "/_private/tasks",
        "/_private/"
      ]
    },
    "/loading": {
      "filePath": "loading.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_private/items": {
      "filePath": "_private/items.tsx",
      "parent": "/_private"
    },
    "/_private/quick": {
      "filePath": "_private/quick.tsx",
      "parent": "/_private"
    },
    "/_private/tasks": {
      "filePath": "_private/tasks.tsx",
      "parent": "/_private"
    },
    "/_private/": {
      "filePath": "_private/index.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
